plugins {
    id "me.champeau.gradle.jmh" version "0.4.3"
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    group 'charm'
    version 'wow-bot-1.0-SNAPSHOT'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://raw.githubusercontent.com/alexeygrigorev/maven-repo/master/"
        }
        maven { url "https://jitpack.io" }
    }
}

apply plugin: 'me.champeau.gradle.jmh'
jmhJar.baseName = 'custom'

jar {
    manifest {
        attributes 'Main-Class': 'farmbot.launch.Launcher'
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'farmbot.launch.Launcher'
    }
    baseName = 'run';
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task fatJarEnchantBot(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'enchant.EnchantBot'
    }
    baseName = 'enchantBot';
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task fatJarBgBot(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'bgbot.BgBot'
    }
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task fatJarBuyBot(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'auction.AuctionBot'
    }
    baseName = 'auction-bot'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task fatJarHealBot(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'healbot.HealBot'
    }
    baseName = 'healBot'
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task fatJarRecordPath(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'farmbot.RecordPath'
    }
    baseName = 'recordPath';
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task fatJarScheduledLauncher(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'farmbot.launch.ScheduledLauncher'
    }
    baseName = 'scheduledLauncher';
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task jarBenchmark(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'jmh.FloydBenchmark'
    }
    baseName = 'jmh';
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

dependencies {
    compile(
            [group: 'net.java.dev.jna', name: 'jna-platform', version: '4.4.0'],
            [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'],
            [group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'],
            [group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'],
            [group: 'net.sourceforge', name: 'javaml', version: '0.1.7'],
            ['org.openjdk.jmh:jmh-core:1.20'],
            ['org.openjdk.jmh:jmh-generator-annprocess:1.20'],
            [group: 'org.apache.commons', name: 'commons-math3', version: '3.0'],
    )

    compile 'org.telegram:telegrambots-abilities:3.6'
    compile 'org.telegram:telegrambots:3.6.1'

    testCompile(
            [group: 'junit', name: 'junit', version: '4.12']
    )
}
